require 'test_helper'

class <%= model.cp %>ControllerTest < ActionController::TestCase
  def setup
    <%= model.rails_symname %> = <%= model.cs %>.find(:first)
  end

  context "on GET to <%= model.cp %>Controller#index" do
    setup do
    end

    should_respond_with :success
    should_assign_to :<%= model.s %>
    should_render_template :index
    should_not_set_the_flash
  end

  context "on GET to <%= model.cp %>Controller#show" do
    setup do
      get :show, :id => <%= model.rails_symname %>.id # TODO: make this deal with nested routes.
    end

    should_assign_to :<%= model.s %>
    should_respond_with :success
    should_render_template :show
    should_not_set_the_flash
    should "set <%= model.rails_symname %> to requested instance" do
      assert_equal <%= model.rails_symname %>, assigns(:<%= model.s %>)
    end
  end

  context "on GET to <%= model.cp %>Controller#new" do
    setup do
    end

    should_respond_with :success
    should_assign_to :<%= model.s %>
    should_not_set_the_flash
    should_render_template :new
    should_render_a_form
  end

  context "on GET to <%= model.cp %>Controller#edit" do
    setup do
      get :edit
    end

    should_assign_to :<%= model.s %>
    should_respond_with :success

    should_render_template :edit
    should_not_set_the_flash
    should_render_a_form
    should "set <%= model.rails_symname %> to requested instance" do
      assert_equal <%= model.rails_symname %>, assigns(:<%= model.s %>)
    end
  end

  context "on POST to <%= model.cp %>Controller#create with " do
    setup do
      post :create
    end

    should_assign_to :<%= model.s %>
    should_set_the_flash_to(/created/i)
    should_redirect_to  "<%= model.s %>_url(<%= model.rails_symname %>)"
    should "not have errors on <%= model.rails_symname %>" do 
    end
  end

  context "on PUT to <%= model.cp %>Controller#update with" do
    setup do
    end

    should_assign_to :<%= model.s %>
    should_set_the_flash_to(/updated/i)
    should_redirect_to "<%= model.s %>_url(<%= model.rails_symname %>)"
    should "not have errors on <%= model.rails_symname %>" do
      assert assigns(:<%= model.s %>).errors.empty?
    end
  end

  context "on DELETE to <%= model.cp %>Controller#destroy" do
    setup do
    end

    should_set_the_flash_to(/removed/i)
    should_redirect_to "<%= model.p %>_url()"
    should "destroy record" do 
    end
  end

  context "on GET to <%= model.cp %>Controller#index as xml" do
    setup do
    end

    should_respond_with :success
    should "have ContentType set to 'application/xml'" do 
    end

    should "return <<%= model.p %>/> as the root element" do 
    end

    should_assign_to :<%= model.p %>
  end

  context "on GET to <%= model.cp %>Controller#show as xml" do
    setup do
    end

    should_assign_to :<%= model.s %>
    should_respond_with :success

    should "have ContentType set to 'application/xml'" do 
    end

    should "return <<%= model.s %>/> as the root element" do 
    end
  end

  context "on POST to <%= model.cp %>Controller#create as xml" do
    setup do
    end

    should_assign_to :<%= model.s %>
    should "not have errors on <%= model.rails_symname %>" do 
    end
  end

  context "on PUT to <%= model.cp %>Controller#update as xml" do
    setup do
    end

    should_assign_to :<%= model.s %>
    should "not have errors on <%= model.rails_symname %>" do 
    end
  end

  context "on DELETE to <%= model.cp %>Controller#destroy as xml" do
    setup do
    end

    should "destroy record" do 
    end
  end
end
